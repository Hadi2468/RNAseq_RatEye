#######################################################################################
### DESeq2 Analysis and Normalization of the transcriptomic data for 53 rat samples ###
#######################################################################################
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install(version = "3.10")
# BiocManager::install("tximport")
# BiocManager::install("DESeq2")
install.packages("tidyverse")
install.packages("ggplot2")
#######################################################################################
### DESeq2 Analysis and Normalization of the transcriptomic data for 53 rat samples ###
#######################################################################################
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
BiocManager::install("tximport")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
install.packages("ggplot2")
Packages <- c("tximport", "DESeq2", "tidyverse", "ggplot2")
lapply(Packages, library, character.only = TRUE)
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
dir <- setwd("./datasets"); getwd()
getwd()
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
dir <- setwd("./RNAseq_RatEye/datasets"); getwd()
getwd()
setwd("../")
getwd()
setwd("../RNAseq_RatEye/datasets"); getwd()
getwd()
setwd("../RNAseq_RatEye"); getwd()
setwd("./RNAseq_RatEye"); getwd()
pheatmap(cor(corrTable))
Packages <- c("tximport", "tximportData", "DESeq2", "tidyverse", "dplyr", "vctrs", "fs", "ggplot2")
lapply(Packages, library, character.only = TRUE)
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
getwd()
setwd("./Data"); getwd()
samples <- read.csv("samples53.csv", sep=",", header=TRUE)
#   else {samples$Class_Age[i] <- "A4_Aged"} }
# for (i in (1:length(samples$Batch))) {
#   samples$Batch[i] <- if(samples$Batch[i] == "12") "B12" else if(samples$Batch[i] == "13") "B13" else if(samples$Batch[i] == "14") "B14" else "B15" }
# for (i in (1:length(samples$Class))) {
#   samples$Class[i] <- if(samples$Class[i] == "H") "High" else if(samples$Class[i] == "E") "Elevated" else "Normal" }
# samples <- new_samples[complete.cases(new_samples), ]         # remove 8 samples which have no IOP data ("NA")
# dim(samples)
# head(samples)
# samples$Class_OD <- relevel(samples$Class_OD, "Normal")
# samples$Class_OS <- relevel(samples$Class_OS, "Normal")
samples$Class_IOP <- relevel(samples$Class_IOP, "Normal")
##########################################################################################
### Step 2: Import RSEM outputs(transcripts aboundance estimation) file using tximport ###
##########################################################################################
setwd("./rsem_export_dataset"); getwd()
RSEM_output_gene_files <- file.path(getwd(), paste0(samples$sample, ".genes.results"))
names(RSEM_output_gene_files) <- samples$sample
txi.rsem <- tximport(RSEM_output_gene_files, type="rsem", txIn=FALSE, txOut=FALSE)
########### Add IOP as gene for normalization ##########
txi.rsem$counts <- rbind(txi.rsem$counts, t(samples$Avg_IOP))
txi.rsem$abundance <- rbind(txi.rsem$abundance, txi.rsem$abundance[32883,])
txi.rsem$length <- rbind(txi.rsem$length, txi.rsem$length[32883,])
#########################################################################################
### Step 3: Producing the DESeq2 data frame based on the outputs of Step 1 and Step 2 ###
#########################################################################################
# colnames(txi.rsem$counts)
# row.names(samples)
txi.rsem$length[txi.rsem$length == 0] <- 1
dds <- DESeqDataSetFromTximport(txi.rsem, samples, ~sample)
#################################################
### Step 4: Normalization based on rlog & vsd ###
#################################################
setwd("../"); getwd()
# vsd <- vst(dds, blind=TRUE)      # Variance Stabilizing Transformation
rld <- rlog(dds, blind=TRUE)     # Regularized Log Transformation
# dim(txi.rsem$counts)
# dim(assay(vsd))
dim(assay(rld))
# dim(assay(ntd))
# sub_genes_cnt <- data.frame(t(txi.rsem$counts))   # real counts
sub_genes_rld <- data.frame(t(assay(rld)))
# sub_genes_vsd <- data.frame(t(assay(vsd)))
# sub_genes_ntd <- data.frame(t(assay(ntd)))
# dim(sub_genes_cnt)
dim(sub_genes_rld)
# dim(sub_genes_vsd)
# dim(sub_genes_ntd)
# sub_genes_cnt <- sub_genes_cnt[-c(3, 14, 42, 43, 44, 45, 46, 47), ]
sub_genes_rld <- sub_genes_rld[-c(3, 14, 42, 43, 44, 45, 46, 47), ]
# sub_genes_vsd <- sub_genes_vsd[-c(3, 14, 42, 43, 44, 45, 46, 47), ]
# sub_genes_ntd <- sub_genes_ntd[-c(3, 14, 42, 43, 44, 45, 46, 47), ]
# write.table(sub_genes_cnt, file="real_counts.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
# write.table(sub_genes_rld, file="normalized_rlog.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
# write.table(sub_genes_vsd, file="normalized_vst.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
# write.table(sub_genes_ntd, file="normalized_log2.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
write.table(sub_genes_rld, file="normalized_rlog_IOP.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
rm()
rm(:)
rm(all)
rm(...)
Packages <- c("tximport", "tximportData", "DESeq2", "tidyverse", "dplyr", "vctrs", "fs", "ggplot2",
"corrplot", "RColorBrewer", "ggpubr", "pheatmap", "ppcor", "BBmisc")
lapply(Packages, library, character.only = TRUE)
getwd()
samples <- read.csv("samples53.csv", sep=",", header=TRUE)
dim(samples)
# sub_samples <- samples[-c(3, 14, 42, 43, 44, 45, 46, 47), ]
# write.table(sub_samples, file="samples45.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
sub_samples <- read.csv("samples45.csv", sep=",", header=TRUE)
dim(sub_samples)
sub_genes_r <- read.csv("normalized_rlog_IOP.csv", sep=",", header=TRUE)
sub_genes_r <- sub_genes_rld
# sub_genes_v <- read.csv("normalized_vst.csv", sep=",", header=TRUE)
# sub_genes_c <- read.csv("real_counts.csv", sep=",", header=TRUE)
# dim(sub_genes_2)
dim(sub_genes_r)
names(sub_genes_r)[32884]
names(sub_genes_r)[32884] <- "IOP_norm"
selGenes <- subset(sub_genes_r, select=c(IOP_norm, ENSRNOG00000016696_Angpt2, ENSRNOG00000055293_Ptprb, ENSRNOG00000008587_Tek))
corrTable <- cbind(sub_samples$Avg_IOP, selGenes)    # Correlation tables for three genes
View(corrTable)
names(corrTable) <- c("IOP", "IOP_norm", "ANGPT2", "PTPRB", "TEK")
summary(corrTable)     # Basic statistical analysis
# ggqqplot(corrTable$ANGPT2)
# ggqqplot(corrTable$PTPRB)
# ggqqplot(corrTable$TEK)
# ggqqplot(corrTable$IOP)
shapiro.test(corrTable$ANGPT2)
shapiro.test(corrTable$PTPRB)
shapiro.test(corrTable$TEK)
shapiro.test(corrTable$IOP)
shapiro.test(corrTable$IOP_norm)
ggplot(corrTable, aes(IOP_norm)) + geom_density(fill="green")
normalize_s <- function(x) {
return ((x - mean(x)) / sd(x))
}
corrTable$IOP_norm <- normalize_s(corrTable$IOP)
ggplot(corrTable, aes(IOP_norm)) + geom_density(fill="green")
shapiro.test(corrTable$IOP_norm)
corrTable <- cbind(sub_samples$Avg_IOP, selGenes)    # Correlation tables for three genes
names(corrTable) <- c("IOP", "IOP_norm", "ANGPT2", "PTPRB", "TEK")
shapiro.test(corrTable$IOP_norm)
corrplot(cor(corrTable, method="pearson"), method="color", type="upper", order="hclust",
col=colorRampPalette(c("dodgerblue", "aliceblue", "brown1"))(7),
addCoef.col="black", tl.col="black", tl.cex=1, addrect=3)
corrTable$IOP_norm <- normalize_s(corrTable$IOP)
corrplot(cor(corrTable, method="pearson"), method="color", type="upper", order="hclust",
col=colorRampPalette(c("dodgerblue", "aliceblue", "brown1"))(7),
addCoef.col="black", tl.col="black", tl.cex=1, addrect=3)
normalize_3 <- function(x) {return ( 1+1023*(x - min(x)) / sd(x))}
corrTable$IOP_norm <- normalize_3(corrTable$IOP)
summary(corrTable)     # Basic statistical analysis
normalize_3 <- preprocess(exprsObj,log2=TRUE, norm="ALL", destname=NULL)
# BiocManager::install("")
# install.packages("corrplot")
# install.packages("RColorBrewer")
# install.packages("ggpubr")
# install.packages("pheatmap")
# install.packages("ppcor")
BiocManager::install("mAPKL")
# BiocManager::install("")
# install.packages("corrplot")
# install.packages("RColorBrewer")
# install.packages("ggpubr")
# install.packages("pheatmap")
# install.packages("ppcor")
library(mAPKL)
normalize_3 <- preprocess(corrTable$IOP,log2=TRUE, norm="ALL", destname=NULL)
normalize_3 <- preprocess(corrTable$IOP,log2=TRUE, norm="ALL", destname=NULL)
summary(corrTable$IOP)
shapiro.test(corrTable$IOP_norm)
shapiro.test(corrTable$IOP)
corrTable$IOP_norm <- log(corrTable$IOP)
summary(corrTable$IOP_norm)
shapiro.test(corrTable$IOP_norm)
corrTable$IOP_norm <- log10(corrTable$IOP)
summary(corrTable$IOP_norm)
shapiro.test(corrTable$IOP_norm)
corrTable$IOP_norm <- log2(corrTable$IOP)
summary(corrTable$IOP_norm)
shapiro.test(corrTable$IOP_norm)
corrTable$IOP_norm <- normalize_2(corrTable$IOP_norm)
summary(corrTable$IOP_norm)
shapiro.test(corrTable$IOP_norm)
corrTable$IOP_norm <- normalize_3(corrTable$IOP_norm)
summary(corrTable$IOP_norm)
shapiro.test(corrTable$IOP_norm)
boxcox(corrTable$IOP)
aaaa <- corrTable$IOP
boxcox(aaaa)
aaaa
n <- 100
x <- runif(n, 1, 5)
y <- x^3 + rnorm(n)
x
ggplot(x) + geom_density(fill="green")
ggplot(x, aes(x)) + geom_density(fill="green")
hist(x)
plot(density(x))
plot(density(y))
summary(corrTable$x)
summary(x)
shapiro.test(x)
shapiro.test(y)
boxcox(y ~ x)
boxcoxfit(x, y, lambda2 = TRUE)
boxcox(x, y, lambda2 = TRUE)
Box = boxcox(Turbidity ~ 1, lambda = seq(-6,6,0.1))
########## BoxCox ##########
library(MASS)
Box = boxcox(Turbidity ~ 1, lambda = seq(-6,6,0.1))
Box = boxcox(corrTable$IOP ~ 1, lambda = seq(-6,6,0.1))
Cox = data.frame(Box$x, Box$y)            # Create a data frame with the results
Cox2 = Cox[with(Cox, order(-Cox$Box.y)),] # Order the new data frame by decreasing y
Cox2[1,]                                  # Display the lambda with the greatest
lambda = Cox2[1, "Box.x"]                 # Extract that lambda
T_box = (corrTable$IOP ^ lambda - 1)/lambda   # Transform the original data
plotNormalHistogram(T_box)
library(rcompanion)
plotNormalHistogram(T_box)
install.packages("rcompanion")
Packages <- c("tximport", "tximportData", "DESeq2", "tidyverse", "dplyr", "vctrs", "fs", "ggplot2",
"corrplot", "RColorBrewer", "ggpubr", "pheatmap", "ppcor", "BBmisc", "mAPKL", "rcompanion")
lapply(Packages, library, character.only = TRUE)
plotNormalHistogram(T_box)
summary(T_box)
shapiro.test(T_box)
plotNormalHistogram(T_box)
corrTable$IOP_norm <- T_box
ggplot(corrTable, aes(IOP_norm)) + geom_density(fill="green")
summary(corrTable$IOP_norm)
########## BoxCox ##########
Box = boxcox(corrTable$IOP ~ 1, lambda = seq(-10,10,0.1))
Cox = data.frame(Box$x, Box$y)            # Create a data frame with the results
Cox2 = Cox[with(Cox, order(-Cox$Box.y)),] # Order the new data frame by decreasing y
Cox2[1,]                                  # Display the lambda with the greatest
lambda = Cox2[1, "Box.x"]                 # Extract that lambda
T_box = (corrTable$IOP ^ lambda - 1)/lambda   # Transform the original data
plotNormalHistogram(T_box)
corrTable$IOP_norm <- T_box
summary(corrTable$IOP_norm)
shapiro.test(corrTable$IOP_norm)
########## BoxCox ##########
Box = boxcox(corrTable$IOP ~ 1, lambda = seq(-25,25,0.1))
Cox = data.frame(Box$x, Box$y)            # Create a data frame with the results
Cox2 = Cox[with(Cox, order(-Cox$Box.y)),] # Order the new data frame by decreasing y
Cox2[1,]                                  # Display the lambda with the greatest
lambda = Cox2[1, "Box.x"]                 # Extract that lambda
T_box = (corrTable$IOP ^ lambda - 1)/lambda   # Transform the original data
plotNormalHistogram(T_box)
corrTable$IOP_norm <- T_box
summary(corrTable$IOP_norm)
shapiro.test(corrTable$IOP_norm)
########## BoxCox ##########
Box = boxcox(corrTable$IOP ~ 1, lambda = seq(-100,100,0.1))
Cox = data.frame(Box$x, Box$y)            # Create a data frame with the results
Cox2 = Cox[with(Cox, order(-Cox$Box.y)),] # Order the new data frame by decreasing y
Cox2[1,]                                  # Display the lambda with the greatest
lambda = Cox2[1, "Box.x"]                 # Extract that lambda
T_box = (corrTable$IOP ^ lambda - 1)/lambda   # Transform the original data
plotNormalHistogram(T_box)
corrTable$IOP_norm <- T_box
summary(corrTable$IOP_norm)
shapiro.test(corrTable$IOP_norm)
########## BoxCox ##########
Box = boxcox(corrTable$IOP ~ 1, lambda = seq(-1,1,0.1))
Cox = data.frame(Box$x, Box$y)            # Create a data frame with the results
Cox2 = Cox[with(Cox, order(-Cox$Box.y)),] # Order the new data frame by decreasing y
Cox2[1,]                                  # Display the lambda with the greatest
lambda = Cox2[1, "Box.x"]                 # Extract that lambda
T_box = (corrTable$IOP ^ lambda - 1)/lambda   # Transform the original data
plotNormalHistogram(T_box)
corrTable$IOP_norm <- T_box
summary(corrTable$IOP_norm)
shapiro.test(corrTable$IOP_norm)
