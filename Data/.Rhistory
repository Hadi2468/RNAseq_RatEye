#######################################################################################
### DESeq2 Analysis and Normalization of the transcriptomic data for 53 rat samples ###
#######################################################################################
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install(version = "3.10")
# BiocManager::install("tximport")
# BiocManager::install("DESeq2")
install.packages("tidyverse")
install.packages("ggplot2")
#######################################################################################
### DESeq2 Analysis and Normalization of the transcriptomic data for 53 rat samples ###
#######################################################################################
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
BiocManager::install("tximport")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
install.packages("ggplot2")
Packages <- c("tximport", "DESeq2", "tidyverse", "ggplot2")
lapply(Packages, library, character.only = TRUE)
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
dir <- setwd("./datasets"); getwd()
getwd()
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
dir <- setwd("./RNAseq_RatEye/datasets"); getwd()
getwd()
setwd("../")
getwd()
setwd("../RNAseq_RatEye/datasets"); getwd()
getwd()
setwd("../RNAseq_RatEye"); getwd()
setwd("./RNAseq_RatEye"); getwd()
pheatmap(cor(corrTable))
Packages <- c("tximport", "tximportData", "DESeq2", "tidyverse", "dplyr", "vctrs", "fs", "ggplot2")
lapply(Packages, library, character.only = TRUE)
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
getwd()
setwd("./Data"); getwd()
samples <- read.csv("samples53.csv", sep=",", header=TRUE)
#   else {samples$Class_Age[i] <- "A4_Aged"} }
# for (i in (1:length(samples$Batch))) {
#   samples$Batch[i] <- if(samples$Batch[i] == "12") "B12" else if(samples$Batch[i] == "13") "B13" else if(samples$Batch[i] == "14") "B14" else "B15" }
# for (i in (1:length(samples$Class))) {
#   samples$Class[i] <- if(samples$Class[i] == "H") "High" else if(samples$Class[i] == "E") "Elevated" else "Normal" }
# samples <- new_samples[complete.cases(new_samples), ]         # remove 8 samples which have no IOP data ("NA")
# dim(samples)
# head(samples)
# samples$Class_OD <- relevel(samples$Class_OD, "Normal")
# samples$Class_OS <- relevel(samples$Class_OS, "Normal")
samples$Class_IOP <- relevel(samples$Class_IOP, "Normal")
##########################################################################################
### Step 2: Import RSEM outputs(transcripts aboundance estimation) file using tximport ###
##########################################################################################
setwd("./rsem_export_dataset"); getwd()
RSEM_output_gene_files <- file.path(getwd(), paste0(samples$sample, ".genes.results"))
names(RSEM_output_gene_files) <- samples$sample
txi.rsem <- tximport(RSEM_output_gene_files, type="rsem", txIn=FALSE, txOut=FALSE)
########### Add IOP as gene for normalization ##########
txi.rsem$counts <- rbind(txi.rsem$counts, t(samples$Avg_IOP))
txi.rsem$abundance <- rbind(txi.rsem$abundance, txi.rsem$abundance[32883,])
txi.rsem$length <- rbind(txi.rsem$length, txi.rsem$length[32883,])
#########################################################################################
### Step 3: Producing the DESeq2 data frame based on the outputs of Step 1 and Step 2 ###
#########################################################################################
# colnames(txi.rsem$counts)
# row.names(samples)
txi.rsem$length[txi.rsem$length == 0] <- 1
dds <- DESeqDataSetFromTximport(txi.rsem, samples, design=~1)    # Solution of Michael Love
#################################################
### Step 4: Normalization based on rlog & vsd ###
#################################################
setwd("../"); getwd()
# vsd <- vst(dds, blind=TRUE)      # Variance Stabilizing Transformation
rld <- rlog(dds, blind=FALSE)     # Regularized Log Transformation
# dim(txi.rsem$counts)
# dim(assay(vsd))
dim(assay(rld))
RSEM_output_gene_files <- file.path(getwd(), paste0(samples$sample, ".genes.results"))
names(RSEM_output_gene_files) <- samples$sample
txi.rsem <- tximport(RSEM_output_gene_files, type="rsem", txIn=FALSE, txOut=FALSE)
#########################################################################################
### Step 3: Producing the DESeq2 data frame based on the outputs of Step 1 and Step 2 ###
#########################################################################################
# colnames(txi.rsem$counts)
# row.names(samples)
txi.rsem$length[txi.rsem$length == 0] <- 1
# dds <- DESeqDataSetFromTximport(txi.rsem, samples, ~sample)
dds <- DESeqDataSetFromTximport(txi.rsem, samples, design=~1)    # Solution of Michael Love
getwd()
#################################################
### Step 4: Normalization based on rlog & vsd ###
#################################################
setwd("../"); getwd()
Packages <- c("tximport", "tximportData", "DESeq2", "tidyverse", "dplyr", "vctrs", "fs", "ggplot2")
lapply(Packages, library, character.only = TRUE)
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
getwd()
setwd("./Data"); getwd()
samples <- read.csv("samples53.csv", sep=",", header=TRUE)
#   else {samples$Class_Age[i] <- "A4_Aged"} }
# for (i in (1:length(samples$Batch))) {
#   samples$Batch[i] <- if(samples$Batch[i] == "12") "B12" else if(samples$Batch[i] == "13") "B13" else if(samples$Batch[i] == "14") "B14" else "B15" }
# for (i in (1:length(samples$Class))) {
#   samples$Class[i] <- if(samples$Class[i] == "H") "High" else if(samples$Class[i] == "E") "Elevated" else "Normal" }
# samples <- new_samples[complete.cases(new_samples), ]         # remove 8 samples which have no IOP data ("NA")
# dim(samples)
# head(samples)
# samples$Class_OD <- relevel(samples$Class_OD, "Normal")
# samples$Class_OS <- relevel(samples$Class_OS, "Normal")
samples$Class_IOP <- relevel(samples$Class_IOP, "Normal")
##########################################################################################
### Step 2: Import RSEM outputs(transcripts aboundance estimation) file using tximport ###
##########################################################################################
setwd("./rsem_export_dataset"); getwd()
RSEM_output_gene_files <- file.path(getwd(), paste0(samples$sample, ".genes.results"))
names(RSEM_output_gene_files) <- samples$sample
txi.rsem <- tximport(RSEM_output_gene_files, type="rsem", txIn=FALSE, txOut=FALSE)
#########################################################################################
### Step 3: Producing the DESeq2 data frame based on the outputs of Step 1 and Step 2 ###
#########################################################################################
# colnames(txi.rsem$counts)
# row.names(samples)
txi.rsem$length[txi.rsem$length == 0] <- 1
# dds <- DESeqDataSetFromTximport(txi.rsem, samples, ~sample)
# dds <- DESeqDataSetFromTximport(txi.rsem, samples, design=~1)    # First solution by Michael Love
dds <- DESeqDataSetFromTximport(txi.rsem, samples, design=~Sex+Age.scaled)    # Second solution by Michael Love
#################################################
### Step 4: Normalization based on rlog & vsd ###
#################################################
setwd("../"); getwd()
vsd <- vst(dds, blind=FALSE)      # Variance Stabilizing Transformation
rld <- rlog(dds, blind=FALSE)     # Regularized Log Transformation
# dim(txi.rsem$counts)
dim(assay(vsd))
dim(assay(rld))
# dim(assay(ntd))
sub_genes_cnt <- data.frame(t(txi.rsem$counts))   # real counts
sub_genes_rld <- data.frame(t(assay(rld)))
sub_genes_vsd <- data.frame(t(assay(vsd)))
# sub_genes_vsd <- data.frame(t(assay(vsd)))
# sub_genes_ntd <- data.frame(t(assay(ntd)))
dim(sub_genes_cnt)
dim(sub_genes_rld)
dim(sub_genes_vsd)
# sub_genes_vsd <- sub_genes_vsd[-c(3, 14, 42, 43, 44, 45, 46, 47), ]
# sub_genes_ntd <- sub_genes_ntd[-c(3, 14, 42, 43, 44, 45, 46, 47), ]
# write.table(sub_genes_cnt, file="real_counts.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
# write.table(sub_genes_rld, file="normalized_rlog.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
# write.table(sub_genes_vsd, file="normalized_vst.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
# write.table(sub_genes_ntd, file="normalized_log2.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
# write.table(sub_genes_rld, file="normalized_rlog_IOP.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
write.table(sub_genes_rld_53, file="normalized_rlog_Michael.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
# sub_genes_vsd <- sub_genes_vsd[-c(3, 14, 42, 43, 44, 45, 46, 47), ]
# sub_genes_ntd <- sub_genes_ntd[-c(3, 14, 42, 43, 44, 45, 46, 47), ]
# write.table(sub_genes_cnt, file="real_counts.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
# write.table(sub_genes_rld, file="normalized_rlog.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
# write.table(sub_genes_vsd, file="normalized_vst.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
# write.table(sub_genes_ntd, file="normalized_log2.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
# write.table(sub_genes_rld, file="normalized_rlog_IOP.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
write.table(sub_genes_rld, file="normalized_rlog_53_Michael.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
# sub_genes_vsd <- sub_genes_vsd[-c(3, 14, 42, 43, 44, 45, 46, 47), ]
# sub_genes_ntd <- sub_genes_ntd[-c(3, 14, 42, 43, 44, 45, 46, 47), ]
write.table(sub_genes_cnt, file="real_counts_53.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
# sub_genes_vsd <- sub_genes_vsd[-c(3, 14, 42, 43, 44, 45, 46, 47), ]
# sub_genes_ntd <- sub_genes_ntd[-c(3, 14, 42, 43, 44, 45, 46, 47), ]
# write.table(sub_genes_cnt, file="real_counts.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
# write.table(sub_genes_rld, file="normalized_rlog.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
write.table(sub_genes_vsd, file="normalized_vst_53.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
View(sub_genes_cnt)
Packages <- c("tximport", "tximportData", "DESeq2", "tidyverse", "dplyr", "vctrs", "fs", "ggplot2", "kader", "remotes", "nlcor",
"corrplot", "RColorBrewer", "ggpubr", "pheatmap", "ppcor", "BBmisc", "rcompanion", "caret", "moments")
lapply(Packages, library, character.only=TRUE)
getwd()
samples <- read.csv("samples53.csv", sep=",", header=TRUE)
sub_genes_r = sub_genes_rld
sub_genes_vsd = sub_genes_vsd
sub_genes_v = sub_genes_vsd
sub_genes_c = sub_genes_cnt
# sub_genes_r <- read.csv("normalized_rlog_IOP.csv", sep=",", header=TRUE)     # Genes + IOP
# sub_genes_v <- read.csv("normalized_vst.csv", sep=",", header=TRUE)
# sub_genes_c <- read.csv("real_counts.csv", sep=",", header=TRUE)
# dim(sub_genes_2)
dim(sub_genes_r)
dim(sub_genes_v)
dim(sub_genes_c)
View(samples)
########## DR_Chen requested table ##############
Dr_Chen <- cbind(samples[,c(1, 22, 20, 21, 19, 8, 23, 4)],
subset(sub_genes_r, select=c(ENSRNOG00000016696_Angpt2, ENSRNOG00000055293_Ptprb, ENSRNOG00000008587_Tek)),
subset(sub_genes_v, select=c(ENSRNOG00000016696_Angpt2, ENSRNOG00000055293_Ptprb, ENSRNOG00000008587_Tek)),
subset(sub_genes_c, select=c(ENSRNOG00000016696_Angpt2, ENSRNOG00000055293_Ptprb, ENSRNOG00000008587_Tek)))
names(Dr_Chen) <- c("sample", "IOP", "OD", "OS", "IOP_class", "Age", "Age_class", "Sex", "ANGPT2_rlog", "PTPRB_rlog", "TEK_rlog",
"ANGPT2_vst", "PTPRB_vst", "TEK_vst", "ANGPT2_raw", "PTPRB_raw", "TEK_raw")
View(Dr_Chen)
write.table(Dr_Chen, file="Dr_Chen.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
