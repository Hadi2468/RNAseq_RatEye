#######################################################################################
### DESeq2 Analysis and Normalization of the transcriptomic data for 53 rat samples ###
#######################################################################################
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install(version = "3.10")
# BiocManager::install("tximport")
# BiocManager::install("DESeq2")
install.packages("tidyverse")
install.packages("ggplot2")
#######################################################################################
### DESeq2 Analysis and Normalization of the transcriptomic data for 53 rat samples ###
#######################################################################################
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
BiocManager::install("tximport")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
install.packages("ggplot2")
Packages <- c("tximport", "DESeq2", "tidyverse", "ggplot2")
lapply(Packages, library, character.only = TRUE)
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
dir <- setwd("./datasets"); getwd()
getwd()
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
dir <- setwd("./RNAseq_RatEye/datasets"); getwd()
getwd()
setwd("../")
getwd()
setwd("../RNAseq_RatEye/datasets"); getwd()
getwd()
setwd("../RNAseq_RatEye"); getwd()
setwd("./RNAseq_RatEye"); getwd()
pheatmap(cor(corrTable))
Packages <- c("tximport", "tximportData", "DESeq2", "tidyverse", "dplyr", "vctrs", "fs", "ggplot2")
lapply(Packages, library, character.only = TRUE)
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
getwd()
setwd("./Data"); getwd()
samples <- read.csv("samples53.csv", sep=",", header=TRUE)
#   else {samples$Class_Age[i] <- "A4_Aged"} }
# for (i in (1:length(samples$Batch))) {
#   samples$Batch[i] <- if(samples$Batch[i] == "12") "B12" else if(samples$Batch[i] == "13") "B13" else if(samples$Batch[i] == "14") "B14" else "B15" }
# for (i in (1:length(samples$Class))) {
#   samples$Class[i] <- if(samples$Class[i] == "H") "High" else if(samples$Class[i] == "E") "Elevated" else "Normal" }
# samples <- new_samples[complete.cases(new_samples), ]         # remove 8 samples which have no IOP data ("NA")
# dim(samples)
# head(samples)
# samples$Class_OD <- relevel(samples$Class_OD, "Normal")
# samples$Class_OS <- relevel(samples$Class_OS, "Normal")
samples$Class_IOP <- relevel(samples$Class_IOP, "Normal")
##########################################################################################
### Step 2: Import RSEM outputs(transcripts aboundance estimation) file using tximport ###
##########################################################################################
setwd("./rsem_export_dataset"); getwd()
RSEM_output_gene_files <- file.path(getwd(), paste0(samples$sample, ".genes.results"))
names(RSEM_output_gene_files) <- samples$sample
txi.rsem <- tximport(RSEM_output_gene_files, type="rsem", txIn=FALSE, txOut=FALSE)
########### Add IOP as gene for normalization ##########
txi.rsem$counts <- rbind(txi.rsem$counts, t(samples$Avg_IOP))
txi.rsem$abundance <- rbind(txi.rsem$abundance, txi.rsem$abundance[32883,])
txi.rsem$length <- rbind(txi.rsem$length, txi.rsem$length[32883,])
#########################################################################################
### Step 3: Producing the DESeq2 data frame based on the outputs of Step 1 and Step 2 ###
#########################################################################################
# colnames(txi.rsem$counts)
# row.names(samples)
txi.rsem$length[txi.rsem$length == 0] <- 1
dds <- DESeqDataSetFromTximport(txi.rsem, samples, design=~1)    # Solution of Michael Love
#################################################
### Step 4: Normalization based on rlog & vsd ###
#################################################
setwd("../"); getwd()
# vsd <- vst(dds, blind=TRUE)      # Variance Stabilizing Transformation
rld <- rlog(dds, blind=FALSE)     # Regularized Log Transformation
# dim(txi.rsem$counts)
# dim(assay(vsd))
dim(assay(rld))
RSEM_output_gene_files <- file.path(getwd(), paste0(samples$sample, ".genes.results"))
names(RSEM_output_gene_files) <- samples$sample
txi.rsem <- tximport(RSEM_output_gene_files, type="rsem", txIn=FALSE, txOut=FALSE)
#########################################################################################
### Step 3: Producing the DESeq2 data frame based on the outputs of Step 1 and Step 2 ###
#########################################################################################
# colnames(txi.rsem$counts)
# row.names(samples)
txi.rsem$length[txi.rsem$length == 0] <- 1
# dds <- DESeqDataSetFromTximport(txi.rsem, samples, ~sample)
dds <- DESeqDataSetFromTximport(txi.rsem, samples, design=~1)    # Solution of Michael Love
getwd()
#################################################
### Step 4: Normalization based on rlog & vsd ###
#################################################
setwd("../"); getwd()
library(mgcv)
install.packages(mgcv-package)
install.packages("mgcv")
install.packages("mgcv")
library(mgcv)
install.packages("nlme")
install.packages("nlme")
library(mgcv)
install.packages("mgcv-package")
install.packages("mgcv")
install.packages("mgcv")
library(mgcv)
install.packages("gam")
library(mgcv)
install.packages("gam")
library(mgcv)
library(ggplot2)
# fake data
n <- 50
sig <- 2
dat <- gamSim(1,n=n,scale=sig)
View(dat)
plot(dat$x1)
plot(dat$x2)
plot(dat$x3)
plot(dat$x3, dat$x0)
plot(dat$x3, dat$x1)
# P-spline smoothers (with lambda=0.6) used for x1 and x2; x3 is parametric.
b1 <- mgcv::gam(y ~ s(x1, bs='ps', sp=0.6) + s(x2, bs='ps', sp=0.6) + x3, data = dat)
summary(b1)
plot(b1)
bb1 <- mgcv::gam(y ~ x1 + x2 + x3, data = dat)
summary(bb1)
plot(bb1)
bb1 <- mgcv::gam(y ~ s(x1) + s(x2) + s(x3), data = dat)
summary(bb1)
plot(bb1)
beta <- coef(b1)[grepl("x1", names(coef(b1)))]
s <- p[,grepl("x1", colnames(p))] %*% beta
ggplot(data=cbind.data.frame(s, dat$x1), aes(x=dat$x1, y=s)) + geom_line()
# predict
newdf <- gamSim(1,n=n,scale=sig)
f <- predict(b1, newdata=newdf)
# select smoothing parameters with REML, using P-splines
b2 <- mgcv::gam(y ~ s(x1, bs='ps') + s(x2, bs='ps') + x3, data = dat, method="REML")
# select variables and smoothing parameters
b3 <- mgcv::gam(y ~ s(x0) + s(x1) + s(x2) + s(x3) , data = dat, method="REML", select=TRUE)
# loess smoothers with the gam package (restart R before loading gam)
library(gam)
b4 <- gam::gam(y ~ lo(x1, span=0.6) + lo(x2, span=0.6) + x3, data = dat)
gam(dat ~ s(x1), data = dat, method = "REML")
gam(dat$y ~ s(x1), data = dat, method = "REML")
gam(dat$y ~ s(x1), data = dat)
plot(dat$y)
plot(dat$y, dat$x1)
mm<- gam(dat$y ~ s(x1), data = dat)
plot(mm)
plot(dat$y, dat$x1)
plot(dat$x1, dat$y)
plot(mm)
plot(dat$x1, dat$y)
plot(mm)
plot(dat$x1, dat$y)
plot(mm)
mm<- gam(dat$y ~ x1, data = dat)
plot(dat$x1, dat$y)
plot(mm)
par(mfrow = c(2,2))
gam.check(mm)
par(mfrow = c(1,1))
gam.check(mm)
Packages <- c("tximport", "tximportData", "DESeq2", "tidyverse", "dplyr", "vctrs", "fs", "ggplot2",
"kader", "remotes", "nlcor", "corrplot", "RColorBrewer", "ggpubr", "pheatmap", "NNS",
"ppcor", "BBmisc", "rcompanion", "caret", "moments", "devtools", "readxl", "mgcv")
lapply(Packages, library, character.only=TRUE)
####################################################
### Step 1: Import 45 samples' information files ###
####################################################
getwd()
setwd("./Data"); getwd()
# samples <- read.csv("samples53.csv", sep=",", header=TRUE)
sub_samples <- read.csv("samples45.csv", sep=",", header=TRUE)
dim(sub_samples)
View(sub_samples)
summary(sub_samples$Class_Age3)
# sub_genes_2 <- read.csv("normalized_log2.csv", sep=",", header=TRUE)
# dim(sub_genes_2)
# sub_genes_r <- read.csv("normalized_rlog.csv", sep=",", header=TRUE)
# sub_genes_r <- read.csv("normalized_rlog_IOP.csv", sep=",", header=TRUE)     # Genes + IOP
sub_genes_r <- read.csv("normalized_rlog_Michael.csv", sep=",", header=TRUE)   # Solution by Michael Love
dim(sub_genes_r)
# selGenes <- subset(sub_genes_2, select=c(ENSRNOG00000016696_Angpt2, ENSRNOG00000055293_Ptprb, ENSRNOG00000008587_Tek))
selGenes <- subset(sub_genes_r, select=c(ENSRNOG00000016696_Angpt2, ENSRNOG00000055293_Ptprb, ENSRNOG00000008587_Tek))
corrTable <- cbind(sub_samples$Avg_IOP, selGenes)    # Correlation tables for three genes
names(corrTable) <- c("IOP", "ANGPT2", "PTPRB", "TEK")
# names(corrTable) <- c("IOP", "IOP_norm", "ANGPT2", "PTPRB", "TEK")
summary(corrTable)     # Basic statistical analysis
######## Spearman Correlatoin ########
plot(corrTable$IOP, corrTable$ANGPT2)
corrplot(cor(corrTable, method="spearman"), method="color", type="upper", order="hclust",
col=colorRampPalette(c("dodgerblue", "aliceblue", "brown1"))(7),
addCoef.col="black", tl.col="black", tl.cex=1, addrect=3)
corrTable <- cbind(sub_samples$Avg_IOP, selGenes, sub_samples$Class_Age, sub_samples$Class_Age3, sub_samples$Sex, sub_samples$Batch, corrTable)
View(corrTable)
corrTable <- cbind(sub_samples$Avg_IOP, selGenes, sub_samples$Class_Age, sub_samples$Class_Age3, sub_samples$Sex, sub_samples$Batch)
View(corrTable)
names(corrTable)
names(corrTable) <- c("IOP", "ANGPT2", "PTPRB", "TEK", "Age", "Age3", "Sex", "Batch")
levels(corrTable$Age)
levels(corrTable$Age3)
View(corrTable)
View(sub_samples)
corrTable <- cbind(sub_samples$Avg_IOP, selGenes, sub_samples$AgeInDays, sub_samples$Class_Age3, sub_samples$Sex, sub_samples$Batch)
names(corrTable) <- c("IOP", "ANGPT2", "PTPRB", "TEK", "Age", "Age3", "Sex", "Batch")
View(corrTable)
levels(corrTable$Age)
levels(corrTable$Age3)
levels(corrTable$Age3)
levels(corrTable$Sex)
levels(corrTable$Batch)
############# Age3 ##############
ggscatter(corrTable, x="IOP", y=c("ANGPT2", "PTPRB", "TEK"), size=3, shape=19, color="Age3",
cor.method="spearman", title="Correlation: Spearman,    Normalization: rlog", combine=TRUE,
add="reg.line", conf.int=FALSE, cor.coef=FALSE, xlab="IOP", ylab="Expression") +
stat_cor(aes(color=Age3), label.x=12)
ggscatter(corrTable, x="ANGPT2", y=c("PTPRB", "TEK"), size=3, shape=19, color="Age3",
cor.method="spearman", title="Correlation: Spearman,    Normalization: rlog", combine=TRUE,
add="reg.line", conf.int=FALSE, cor.coef=FALSE, xlab="ANGPT2", ylab="Expression") +
stat_cor(aes(color=Age3), label.x=6.3)
# H0: Mean of ANGPT2 expression for samples with all Age gropus are equal
ggplot(corrTable, aes(x=Age, y=ANGPT2)) + geom_boxplot(color="blue", fill="pink", size=1)
# H0: Mean of ANGPT2 expression for samples with all Age gropus are equal
ggplot(corrTable, aes(x=Age3, y=ANGPT2)) + geom_boxplot(color="blue", fill="pink", size=1)
Anova_results <- aov(ANGPT2 ~ Age3, data=corrTable); summary(Anova_results)
Anova_results <- aov(ANGPT2 ~ IOP + Age3, data=corrTable); summary(Anova_results)
Anova_results <- aov(PTPRB ~ Age3, data=corrTable); summary(Anova_results)
Anova_results <- aov(PTPRB ~ IOP + Age3, data=corrTable); summary(Anova_results)
Linear_model <- lm(ANGPT2 ~ IOP + Age3, corrTable); summary(Linear_model)
######## Division for Age3 ########
corrTable_Age2 <- corrTable
levels(corrTable_Age2$Age3) <- c("Others", "Adult", "Aged")
for (i in (1:45)) {if (corrTable_Age2$Age3[i] == "Aged") {corrTable_Age2$Age3[i] <- "Others"}}
corrTable_Age2$Age3 <- factor(corrTable_Age2$Age3)
levels(corrTable_Age2$Age3)
ggplot(corrTable_Age2, aes(x=Age3, y=ANGPT2)) + geom_boxplot(color="blue", fill="pink", size=1)
summary(corrTable$Age3)
summary(corrTable_Age2$Age3)
Anova_results <- aov(ANGPT2 ~ Age3, corrTable_Age2); summary(Anova_results)
Anova_results <- aov(ANGPT2 ~ IOP + Age3, corrTable_Age2); summary(Anova_results)
t.test(ANGPT2 ~ Age3, corrTable_Age2, mu=0, alt="two.sided", conf=0.95, var.eq=F, paired=F)
t.test(ANGPT2 ~ Age3, corrTable_Age2, mu=0, alt="two.sided", conf=0.95, var.eq=F, paired=F)
t.test(ANGPT2 ~ Age3, corrTable_Age2, mu=0, alt="two.sided", conf=0.95, var.eq=F, paired=F)
t.test(ANGPT2 ~ IOP+Age3, corrTable_Age2, mu=0, alt="two.sided", conf=0.95, var.eq=F, paired=F)
# nlcor(corrTable$IOP, corrTable$PTPRB)
# nlcor(corrTable$IOP, corrTable$TEK)
#
# nlcor(corrTable$ANGPT2, corrTable$IOP)
# nlcor(corrTable$ANGPT2, corrTable$ANGPT2)
# nlcor(corrTable$ANGPT2, corrTable$PTPRB)
# nlcor(corrTable$ANGPT2, corrTable$TEK)
#
# nlcor(corrTable$PTPRB, corrTable$IOP)
# plot(corrTable$PTPRB, corrTable$ANGPT2)
nlcor(corrTable$PTPRB, corrTable$ANGPT2, plt=T)       # R=0.3664747    p=0.006690839
#################### NonLinear Correlatoin (nlcor) ####################
# nlcor(corrTable$IOP, corrTable$ANGPT2, refine = 0.7, plt=T)
#
nlcor(corrTable$IOP, corrTable$IOP)
# nlcor(corrTable$IOP, corrTable$PTPRB)
# nlcor(corrTable$IOP, corrTable$TEK)
#
# nlcor(corrTable$ANGPT2, corrTable$IOP)
# nlcor(corrTable$ANGPT2, corrTable$ANGPT2)
# nlcor(corrTable$ANGPT2, corrTable$PTPRB)
# nlcor(corrTable$ANGPT2, corrTable$TEK)
#
# nlcor(corrTable$PTPRB, corrTable$IOP)
# plot(corrTable$PTPRB, corrTable$ANGPT2)
nlcor(corrTable$PTPRB, corrTable$ANGPT2, plt=T)       # R=0.3664747    p=0.006690839
# nlcor(corrTable$IOP, corrTable$PTPRB)
# nlcor(corrTable$IOP, corrTable$TEK)
#
# nlcor(corrTable$ANGPT2, corrTable$IOP)
# nlcor(corrTable$ANGPT2, corrTable$ANGPT2)
# nlcor(corrTable$ANGPT2, corrTable$PTPRB)
# nlcor(corrTable$ANGPT2, corrTable$TEK)
#
# nlcor(corrTable$PTPRB, corrTable$IOP)
# plot(corrTable$PTPRB, corrTable$ANGPT2)
nlcor(corrTable$PTPRB, corrTable$ANGPT2, plt=T, line_thickness = 2.5, line_opacity = 0.8)       # R=0.3664747    p=0.006690839
# nlcor(corrTable$PTPRB, corrTable$PTPRB)
# nlcor(corrTable$PTPRB, corrTable$TEK)
#
nlcor(corrTable$TEK, corrTable$IOP, plt=T, line_thickness = 2.5, line_opacity = 0.8)            # R=0.4438115     p=0.01823332
# nlcor(corrTable$TEK, corrTable$ANGPT2)
nlcor(corrTable$TEK, corrTable$PTPRB, plt=T, line_thickness = 2.5, line_opacity = 0.8)          # R=0.3986897     p=0.01190667
##################### NonLinear Correlatoin (NNS) ##################################################
## Nonlinear Nonparametric Statistics (NNS) using partial moments.                                ##
## Partial moments are the elements of variance and asymptotically approximate the area of f(x).  ##
## NNS offers Nonlinear Correlation & Dependence analysis.                                        ##
####################################################################################################
# NNS.cor(corrTable$IOP, corrTable$ANGPT2)
# NNS.cor(corrTable$IOP, corrTable$PTPRB)
# plot(corrTable$IOP, corrTable$TEK)
NNS.cor(corrTable$IOP, corrTable$TEK)                  # R (IOP_TEK) = 0.8501074
# NNS.cor(corrTable$ANGPT2, corrTable$PTPRB)
NNS.cor(corrTable$ANGPT2, corrTable$TEK)               # R (ANGPT2_TEK) = 0.5067027
plot(corrTable$ANGPT2, corrTable$TEK)
NNS.cor(corrTable$ANGPT2, corrTable$PTPRB)
##################### NonLinear Correlatoin (NNS) ##################################################
## Nonlinear Nonparametric Statistics (NNS) using partial moments.                                ##
## Partial moments are the elements of variance and asymptotically approximate the area of f(x).  ##
## NNS offers Nonlinear Correlation & Dependence analysis.                                        ##
####################################################################################################
NNS.cor(corrTable$IOP, corrTable$ANGPT2)
NNS.cor(corrTable$IOP, corrTable$PTPRB)
##################### NonLinear Correlatoin (NNS) ##################################################
## Nonlinear Nonparametric Statistics (NNS) using partial moments.                                ##
## Partial moments are the elements of variance and asymptotically approximate the area of f(x).  ##
## NNS offers Nonlinear Correlation & Dependence analysis.                                        ##
####################################################################################################
# NNS.cor(corrTable$IOP, corrTable$ANGPT2)
# NNS.cor(corrTable$IOP, corrTable$PTPRB)
plot(corrTable$IOP, corrTable$TEK)
plot(corrTable$ANGPT2, corrTable$TEK)
##################### NonLinear Correlatoin (NNS) ##################################################
## Nonlinear Nonparametric Statistics (NNS) using partial moments.                                ##
## Partial moments are the elements of variance and asymptotically approximate the area of f(x).  ##
## NNS offers Nonlinear Correlation & Dependence analysis.                                        ##
####################################################################################################
# NNS.cor(corrTable$IOP, corrTable$ANGPT2)
# NNS.cor(corrTable$IOP, corrTable$PTPRB)
# plot(corrTable$IOP, corrTable$TEK)
# NNS.cor(corrTable$IOP, corrTable$TEK)                  # R (IOP_TEK) = 0.8501074
# NNS.cor(corrTable$ANGPT2, corrTable$PTPRB)
NNS.cor(corrTable$ANGPT2, corrTable$TEK)               # R (ANGPT2_TEK) = 0.5067027
