#######################################################################################
### DESeq2 Analysis and Normalization of the transcriptomic data for 53 rat samples ###
#######################################################################################
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install(version = "3.10")
# BiocManager::install("tximport")
# BiocManager::install("DESeq2")
install.packages("tidyverse")
install.packages("ggplot2")
#######################################################################################
### DESeq2 Analysis and Normalization of the transcriptomic data for 53 rat samples ###
#######################################################################################
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
BiocManager::install("tximport")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
install.packages("ggplot2")
Packages <- c("tximport", "DESeq2", "tidyverse", "ggplot2")
lapply(Packages, library, character.only = TRUE)
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
dir <- setwd("./datasets"); getwd()
getwd()
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
dir <- setwd("./RNAseq_RatEye/datasets"); getwd()
getwd()
setwd("../")
getwd()
setwd("../RNAseq_RatEye/datasets"); getwd()
getwd()
setwd("../RNAseq_RatEye"); getwd()
setwd("./RNAseq_RatEye"); getwd()
pheatmap(cor(corrTable))
Packages <- c("tximport", "tximportData", "DESeq2", "tidyverse", "dplyr", "vctrs", "fs", "ggplot2")
lapply(Packages, library, character.only = TRUE)
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
getwd()
setwd("./Data"); getwd()
samples <- read.csv("samples53.csv", sep=",", header=TRUE)
#   else {samples$Class_Age[i] <- "A4_Aged"} }
# for (i in (1:length(samples$Batch))) {
#   samples$Batch[i] <- if(samples$Batch[i] == "12") "B12" else if(samples$Batch[i] == "13") "B13" else if(samples$Batch[i] == "14") "B14" else "B15" }
# for (i in (1:length(samples$Class))) {
#   samples$Class[i] <- if(samples$Class[i] == "H") "High" else if(samples$Class[i] == "E") "Elevated" else "Normal" }
# samples <- new_samples[complete.cases(new_samples), ]         # remove 8 samples which have no IOP data ("NA")
# dim(samples)
# head(samples)
# samples$Class_OD <- relevel(samples$Class_OD, "Normal")
# samples$Class_OS <- relevel(samples$Class_OS, "Normal")
samples$Class_IOP <- relevel(samples$Class_IOP, "Normal")
##########################################################################################
### Step 2: Import RSEM outputs(transcripts aboundance estimation) file using tximport ###
##########################################################################################
setwd("./rsem_export_dataset"); getwd()
RSEM_output_gene_files <- file.path(getwd(), paste0(samples$sample, ".genes.results"))
names(RSEM_output_gene_files) <- samples$sample
txi.rsem <- tximport(RSEM_output_gene_files, type="rsem", txIn=FALSE, txOut=FALSE)
########### Add IOP as gene for normalization ##########
txi.rsem$counts <- rbind(txi.rsem$counts, t(samples$Avg_IOP))
txi.rsem$abundance <- rbind(txi.rsem$abundance, txi.rsem$abundance[32883,])
txi.rsem$length <- rbind(txi.rsem$length, txi.rsem$length[32883,])
#########################################################################################
### Step 3: Producing the DESeq2 data frame based on the outputs of Step 1 and Step 2 ###
#########################################################################################
# colnames(txi.rsem$counts)
# row.names(samples)
txi.rsem$length[txi.rsem$length == 0] <- 1
dds <- DESeqDataSetFromTximport(txi.rsem, samples, design=~1)    # Solution of Michael Love
#################################################
### Step 4: Normalization based on rlog & vsd ###
#################################################
setwd("../"); getwd()
# vsd <- vst(dds, blind=TRUE)      # Variance Stabilizing Transformation
rld <- rlog(dds, blind=FALSE)     # Regularized Log Transformation
# dim(txi.rsem$counts)
# dim(assay(vsd))
dim(assay(rld))
RSEM_output_gene_files <- file.path(getwd(), paste0(samples$sample, ".genes.results"))
names(RSEM_output_gene_files) <- samples$sample
txi.rsem <- tximport(RSEM_output_gene_files, type="rsem", txIn=FALSE, txOut=FALSE)
#########################################################################################
### Step 3: Producing the DESeq2 data frame based on the outputs of Step 1 and Step 2 ###
#########################################################################################
# colnames(txi.rsem$counts)
# row.names(samples)
txi.rsem$length[txi.rsem$length == 0] <- 1
# dds <- DESeqDataSetFromTximport(txi.rsem, samples, ~sample)
dds <- DESeqDataSetFromTximport(txi.rsem, samples, design=~1)    # Solution of Michael Love
getwd()
#################################################
### Step 4: Normalization based on rlog & vsd ###
#################################################
setwd("../"); getwd()
set.seed(23)
x<-seq(0,100,1)
y<-runif(1,0,20)*exp(runif(1,0.005,0.075)*x)+runif(101,0,5)
plot(x,y)
lin_mod=lm(y~x)
plot(x,y)
abline(lin_mod)
nonlin_mod=nls(y~a*exp(b*x),start=list(a=13,b=0.1)) #a is the starting value and b is the exponential start
plot(x,y)
lines(x,predict(nonlin_mod),col=”red”)
lines(x,predict(nonlin_mod), col="red")
error <- lin_mod$residuals
lm_error <- sqrt(mean(error^2))   #5.960544
error2=y-predict(nonlin_mod)
nlm_error <- sqrt(mean(error2^2)) #1.527064
attach(Puromycin)
plot(Puromycin$conc,Puromycin$rate)
mm=function(conc,vmax,k) vmax*conc/(k+conc)
mm1=nls(rate~mm(conc,vmax,k),data=Puromycin,start=c(vmax=50,k=0.05),subset=state==”treated”)
mm1=nls(rate~mm(conc,vmax,k),data=Puromycin,start=c(vmax=50,k=0.05),subset=state=="treated")
mm2=nls(rate~mm(conc,vmax,k),data=Puromycin,start=c(vmax=50,k=0.05),subset=state=="untreated")
mm3=nls(rate~SSmicmen(conc,vmax,k),data=Puromycin,subset=state=="treated")
mm4=nls(rate~SSmicmen(conc,vmax,k),data=Puromycin,subset=state=="untreated")
mm4=nls(rate~SSmicmen(conc,vmax,k),data=Puromycin,subset=state=="untreated")
mm1
model: rate ~ SSmicmen(conc, vmax, k)
data: Puromycin
model
apropos(“^SS”)
apropos(“^SS”)
apropos("^SS")
apropos
cor(y,predict(nonlin_mod)) #0.9976462
#simulate some data
set.seed(20160227)
x<-seq(0,50,1)
y<-((runif(1,10,20)*x)/(runif(1,0,10)+x))+rnorm(51,0,1)
plot(y,x)
m<-nls(y~a*x/(b+x))
Packages <- c("tximport", "tximportData", "DESeq2", "tidyverse", "dplyr", "vctrs", "fs", "ggplot2",
"kader", "remotes", "nlcor", "corrplot", "RColorBrewer", "ggpubr", "pheatmap",
"ppcor", "BBmisc", "rcompanion", "caret", "moments")
lapply(Packages, library, character.only=TRUE)
plot(x,y)
getwd()
setwd("./Data"); getwd()
samples <- read.csv("samples53.csv", sep=",", header=TRUE)
sub_samples <- read.csv("samples45.csv", sep=",", header=TRUE)
dim(sub_samples)
# sub_genes_2 <- read.csv("normalized_log2.csv", sep=",", header=TRUE)
# sub_genes_r <- read.csv("normalized_rlog.csv", sep=",", header=TRUE)
sub_genes_r <- read.csv("normalized_rlog_Michael.csv", sep=",", header=TRUE)   # Solution by Michael Love
# sub_genes_r <- read.csv("normalized_rlog_IOP.csv", sep=",", header=TRUE)     # Genes + IOP
# sub_genes_v <- read.csv("normalized_vst.csv", sep=",", header=TRUE)
# sub_genes_c <- read.csv("real_counts.csv", sep=",", header=TRUE)
# dim(sub_genes_2)
dim(sub_genes_r)
# selGenes <- subset(sub_genes_2, select=c(ENSRNOG00000016696_Angpt2, ENSRNOG00000055293_Ptprb, ENSRNOG00000008587_Tek))
selGenes <- subset(sub_genes_r, select=c(ENSRNOG00000016696_Angpt2, ENSRNOG00000055293_Ptprb, ENSRNOG00000008587_Tek))
corrTable <- cbind(sub_samples$Avg_IOP, selGenes)    # Correlation tables for three genes
names(corrTable) <- c("IOP", "ANGPT2", "PTPRB", "TEK")
# names(corrTable) <- c("IOP", "IOP_norm", "ANGPT2", "PTPRB", "TEK")
summary(corrTable)     # Basic statistical analysis
plot(corrTable$IOP, corrTable$ANGPT2)
######## Spearman Correlatoin ########
corrplot(cor(corrTable, method="spearman"), method="color", type="upper", order="hclust",
col=colorRampPalette(c("dodgerblue", "aliceblue", "brown1"))(7),
addCoef.col="black", tl.col="black", tl.cex=1, addrect=3)
######## NonLinear Correlatoin ########
cor(corrTable$ANGPT2, corrTable$IOP)
nlcor(corrTable$ANGPT2, corrTable$IOP, plt=TRUE)
cor(corrTable$ANGPT2, corrTable$PTPRB)
nlcor(corrTable$ANGPT2, corrTable$PTPRB, plt=TRUE)
cor(corrTable$ANGPT2, corrTable$TEK)
nlcor(corrTable$ANGPT2, corrTable$TEK, plt=TRUE)
cor(corrTable$PTPRB, corrTable$IOP)
nlcor(corrTable$PTPRB, corrTable$IOP, plt=TRUE)
cor(corrTable$TEK, corrTable$IOP)
nlcor(corrTable$TEK, corrTable$IOP, plt=TRUE)
cor(corrTable$IOP, corrTable$TEK)
nlcor(corrTable$IOP, corrTable$TEK, plt=TRUE)
cor(corrTable$IOP, corrTable$PTPRB)
nlcor(corrTable$IOP, corrTable$PTPRB, plt=TRUE)
nlcor(corrTable$TEK, corrTable$ANGPT2, plt=TRUE)
nlcor(corrTable$PTPRB, corrTable$ANGPT2, plt=TRUE)
nlcor(corrTable$IOP, corrTable$ANGPT2, plt=TRUE)
######## NonLinear Correlatoin ########
cor(corrTable$ANGPT2, corrTable$IOP)
nlcor(corrTable$ANGPT2, corrTable$IOP, plt=TRUE)
# install.packages("RColorBrewer")
# install.packages("ggpubr")
# install.packages("pheatmap")
# install.packages("ppcor")
# install.packages("rcompanion")
# install.packages("caret")
# install.packages("kader")
# install.packages("moments")
# install.packages("remotes")
# remotes::install_github("ProcessMiner/nlcor")
install.packages("devtools")
install_github("ProcessMiner/nlcor")
# install.packages("ggpubr")
# install.packages("pheatmap")
# install.packages("ppcor")
# install.packages("rcompanion")
# install.packages("caret")
# install.packages("kader")
# install.packages("moments")
# install.packages("remotes")
# remotes::install_github("ProcessMiner/nlcor")
# install.packages("devtools")
Packages <- c("tximport", "tximportData", "DESeq2", "tidyverse", "dplyr", "vctrs", "fs", "ggplot2",
"kader", "remotes", "nlcor", "corrplot", "RColorBrewer", "ggpubr", "pheatmap",
"ppcor", "BBmisc", "rcompanion", "caret", "moments", "devtools")
lapply(Packages, library, character.only=TRUE)
nlcor(corrTable$ANGPT2, corrTable$IOP, plt=T)
nlcor(corrTable$ANGPT2, corrTable$IOP, plt=T)
# install.packages("ggpubr")
# install.packages("pheatmap")
# install.packages("ppcor")
# install.packages("rcompanion")
# install.packages("caret")
# install.packages("kader")
# install.packages("moments")
# install.packages("remotes")
# remotes::install_github("ProcessMiner/nlcor")
# install.packages("devtools")
remove.packages('nlcor')
# install.packages("ggpubr")
# install.packages("pheatmap")
# install.packages("ppcor")
# install.packages("rcompanion")
# install.packages("caret")
# install.packages("kader")
# install.packages("moments")
# install.packages("remotes")
# remotes::install_github("ProcessMiner/nlcor")
# install.packages("devtools")
remove.packages("nlcor")
# install.packages("corrplot")
# install.packages("RColorBrewer")
# install.packages("ggpubr")
# install.packages("pheatmap")
# install.packages("ppcor")
# install.packages("rcompanion")
# install.packages("caret")
# install.packages("kader")
# install.packages("moments")
# install.packages("remotes")
remotes::install_github("ProcessMiner/nlcor")
remove.packages("nlcor")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("ProcessMiner/nlcor")
library(nlcor)
