#######################################################################################
### DESeq2 Analysis and Normalization of the transcriptomic data for 53 rat samples ###
#######################################################################################
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install(version = "3.10")
# BiocManager::install("tximport")
# BiocManager::install("DESeq2")
install.packages("tidyverse")
install.packages("ggplot2")
#######################################################################################
### DESeq2 Analysis and Normalization of the transcriptomic data for 53 rat samples ###
#######################################################################################
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
BiocManager::install("tximport")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
install.packages("ggplot2")
Packages <- c("tximport", "DESeq2", "tidyverse", "ggplot2")
lapply(Packages, library, character.only = TRUE)
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
dir <- setwd("./datasets"); getwd()
getwd()
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
dir <- setwd("./RNAseq_RatEye/datasets"); getwd()
getwd()
setwd("../")
getwd()
setwd("../RNAseq_RatEye/datasets"); getwd()
getwd()
setwd("../RNAseq_RatEye"); getwd()
setwd("./RNAseq_RatEye"); getwd()
pheatmap(cor(corrTable))
Packages <- c("tximport", "tximportData", "DESeq2", "tidyverse", "dplyr", "vctrs", "fs", "ggplot2")
lapply(Packages, library, character.only = TRUE)
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
getwd()
setwd("./Data"); getwd()
samples <- read.csv("samples53.csv", sep=",", header=TRUE)
#   else {samples$Class_Age[i] <- "A4_Aged"} }
# for (i in (1:length(samples$Batch))) {
#   samples$Batch[i] <- if(samples$Batch[i] == "12") "B12" else if(samples$Batch[i] == "13") "B13" else if(samples$Batch[i] == "14") "B14" else "B15" }
# for (i in (1:length(samples$Class))) {
#   samples$Class[i] <- if(samples$Class[i] == "H") "High" else if(samples$Class[i] == "E") "Elevated" else "Normal" }
# samples <- new_samples[complete.cases(new_samples), ]         # remove 8 samples which have no IOP data ("NA")
# dim(samples)
# head(samples)
# samples$Class_OD <- relevel(samples$Class_OD, "Normal")
# samples$Class_OS <- relevel(samples$Class_OS, "Normal")
samples$Class_IOP <- relevel(samples$Class_IOP, "Normal")
##########################################################################################
### Step 2: Import RSEM outputs(transcripts aboundance estimation) file using tximport ###
##########################################################################################
setwd("./rsem_export_dataset"); getwd()
RSEM_output_gene_files <- file.path(getwd(), paste0(samples$sample, ".genes.results"))
names(RSEM_output_gene_files) <- samples$sample
txi.rsem <- tximport(RSEM_output_gene_files, type="rsem", txIn=FALSE, txOut=FALSE)
########### Add IOP as gene for normalization ##########
txi.rsem$counts <- rbind(txi.rsem$counts, t(samples$Avg_IOP))
txi.rsem$abundance <- rbind(txi.rsem$abundance, txi.rsem$abundance[32883,])
txi.rsem$length <- rbind(txi.rsem$length, txi.rsem$length[32883,])
#########################################################################################
### Step 3: Producing the DESeq2 data frame based on the outputs of Step 1 and Step 2 ###
#########################################################################################
# colnames(txi.rsem$counts)
# row.names(samples)
txi.rsem$length[txi.rsem$length == 0] <- 1
dds <- DESeqDataSetFromTximport(txi.rsem, samples, design=~1)    # Solution of Michael Love
#################################################
### Step 4: Normalization based on rlog & vsd ###
#################################################
setwd("../"); getwd()
# vsd <- vst(dds, blind=TRUE)      # Variance Stabilizing Transformation
rld <- rlog(dds, blind=FALSE)     # Regularized Log Transformation
# dim(txi.rsem$counts)
# dim(assay(vsd))
dim(assay(rld))
RSEM_output_gene_files <- file.path(getwd(), paste0(samples$sample, ".genes.results"))
names(RSEM_output_gene_files) <- samples$sample
txi.rsem <- tximport(RSEM_output_gene_files, type="rsem", txIn=FALSE, txOut=FALSE)
#########################################################################################
### Step 3: Producing the DESeq2 data frame based on the outputs of Step 1 and Step 2 ###
#########################################################################################
# colnames(txi.rsem$counts)
# row.names(samples)
txi.rsem$length[txi.rsem$length == 0] <- 1
# dds <- DESeqDataSetFromTximport(txi.rsem, samples, ~sample)
dds <- DESeqDataSetFromTximport(txi.rsem, samples, design=~1)    # Solution of Michael Love
getwd()
#################################################
### Step 4: Normalization based on rlog & vsd ###
#################################################
setwd("../"); getwd()
Packages <- c("tximport", "tximportData", "DESeq2", "tidyverse", "dplyr", "vctrs", "fs", "ggplot2")
lapply(Packages, library, character.only = TRUE)
###################################################
### Step 1: Import 53 samples' information file ###
###################################################
getwd()
setwd("./Data"); getwd()
samples <- read.csv("samples53.csv", sep=",", header=TRUE)
View(samples)
######## Re-Scaling #############
samples[3,8] = NA
samples[14,8] = NA
samples[42,8] = NA
samples[42:47,8] = NA
######## Re-Scaling #############
samples[c(3, 14, 42:47), 8] = "NA"
######## Re-Scaling #############
samples[c(3, 14, 42:47), 8] = NA
samples$Age.scaled <- scale(samples$AgeInDays)
View(samples)
samples$Age.scaled <- scale(samples$AgeInDays)
samples$Age.scaled <- scale(samples$AgeInDays, na.rm = TRUE)
samples$Age.scaled <- scale(samples$AgeInDays, center=TRUE)
samples$Age.scaled <- scale(samples$AgeInDays, center=TRUE, scale=TRUE)
samples$Age.scaled <- scale(samples$AgeInDays, center=TRUE, scale=apply(na.rm = TRUE))
samples$Age.scaled <- scale(samples$AgeInDays, center=TRUE, scale=apply(samples$AgeInDays, na.rm = TRUE))
scalee=apply(samples$AgeInDays, na.rm = TRUE)
samples$Age.scaled <- scale(samples$AgeInDays[!is.na(samples$AgeInDays)])
d <- samples$AgeInDays[!is.na(samples$AgeInDays)]
samples$Age.scaled <- scale(d)
d
as.numeric(d)
samples$Age.scaled <- scale(as.numeric(samples$AgeInDays[!is.na(samples$AgeInDays)]))
d <- as.numeric(samples$AgeInDays[!is.na(samples$AgeInDays)])
summary(d)
d <- scale(as.numeric(samples$AgeInDays[!is.na(samples$AgeInDays)]))
summary(d)
d <- scale(as.numeric(samples$AgeInDays[!is.na(samples$AgeInDays)]), center=T)
summary(d)
d <- scale(as.numeric(samples$AgeInDays[!is.na(samples$AgeInDays)]), center=TRUE)
summary(d)
d <- scale(as.numeric(samples$AgeInDays[!is.na(samples$AgeInDays)]), center=FALSE)
summary(d)
d <- scale(as.numeric(samples$AgeInDays[!is.na(samples$AgeInDays)]), center=FALSE)
dd <- rbind(d[1:3,],NA,existingDF[-(1:3),])
dd <- rbind(d[1:3,],NA,d[-(1:3),])
dd
length((d))
d[1:3,]
d[1:3]
dd <- rbind(d[1:3],NA,d[-(1:3)])
length((dd))
view(d)
view(dd)
dd <- rbind(d[1:3],d[-(1:3)])
View(dd)
d[1:3]
t(d[1:3])
dd <- cbind(d[1:3],d[-(1:3)])
dd <- cbind(t(d[1:3]),t(d[-(1:3)]))
dd <- t(cbind(t(d[1:3]),t(d[-(1:3)])))
View(dd)
dd <- t(cbind(t(d[1:3]),NA, t(d[-(1:3)])))
dd <- t(cbind(t(d[1:2]),NA, t(d[-(3:12)]), NA, t(d[-(13:40)])))
View(dd)
View(dd)
dd <- t(cbind(t(d[1:2]), NA, t(d[-(3:12)]), NA, t(d[-(13:40)])))
View(dd)
dd <- t(cbind(t(d[1:2]), NA, t(d[(3:12)]), NA, t(d[(13:40)])))
View(dd)
dd <- t(cbind(t(d[1:2]), NA, t(d[(3:12)]), NA, t(d[(13:40)]), NA, NA, NA, NA, NA, NA, t(d[(39:45)])))
View(dd)
dd <- t(cbind(t(d[1:2]), NA, t(d[(3:12)]), NA, t(d[(13:39)]), NA, NA, NA, NA, NA, NA, t(d[(40:45)])))
View(dd)
View(d)
######## Re-Scaling #############
samples[c(3, 14, 42:47), 8] = NA
d <- scale(as.numeric(samples$AgeInDays[!is.na(samples$AgeInDays)]), center=FALSE)
samples$Age.scaled <- t(cbind(t(d[1:2]), NA, t(d[(3:12)]), NA, t(d[(13:39)]), NA, NA, NA, NA, NA, NA, t(d[(40:45)])))
write.table(samples, file="samples53.csv", sep=",", quote=F, row.names=TRUE, col.names=TRUE,)
